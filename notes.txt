-- Início do módulo 1: Boas Práticas
  Aula 002 - Configuração do NPM
  Npm - https://www.npmjs.com
    * configurar npm: https://docs.npmjs.com/misc/config
    * configurações default, ex: npm set init-author-name "Arthur Manaia"
    * add user para linkar o projeto com o seu npm: npm adduser  
    * inicializando a biblioteca no projeto: npm init

  Aula 003 - Criando o gitignore
  Gitignore - https://www.npmjs.com/package/gitignore
    * instalação: npm install gitignore -g
    * listar todos os projetos disponíveis para a utilização do gitignore: gitignore -types
    * adicionar o projeto: gitignore Node
      
  Aula 004 - Criando arquivos para documentação

  Arquivos para documentação - readme, license, contributing (se for open source)
    * Repositório de boas práticas para documentação: https://github.com/matiassingers/awesome-readme
    * Repositório do instrutor para levar como exemplo: https://github.com/lyef/lyef-react-component
    * Repositório com um template bacana de readme: https://gist.github.com/PurpleBooth/109311bb0361f32d87a2
    * Licença: https://opensource.org/
      - https://opensource.org/licenses
      - MIT: https://opensource.org/licenses/MIT
    * Contribuição: https://github.com/lyef/lyef-react-component/blob/master/CONTRIBUTING.md
    
  Aula 005 - Padrões de código: styleguide

  Airbnb - padrões de código
      * https://github.com/airbnb/javascript

  Standard - pardrões de código
      * https://github.com/standard/standard

  Idiomatic - padrões de código
      * https://github.com/rwaldron/idiomatic.js

  Jscs - padrões de código
      * jscs.info

  Eslint - padrões de código: criar regras e fazer leitura delas pelos arquivos
      * eslint.org

  Aula 006 e 007 - instalando e usando o eslint

  Eslint - https://eslint.org/
      * integrações com editores de texto: https://eslint.org/docs/user-guide/integrations
      * Passo a passo:
          - npm install eslint --save-dev
          - ./node_modules/.bin/eslint --init
          - ./node_modules/.bin/eslint pasta_do_js/*.js

  Aula 008 - Configurando o EditorConfig

  Editorconfig - http://editorconfig.org/
      * Configurando o editor de texto. Ex: identação
      * plugin necessário para o editor config        
  
  Aula 009 - Criando um npm scripts
    * Ex de um scripts
      - Em package.json no objeto "scripts" a chave será o nome do comando e o valor será o comando
      - Ex: "lint": "./node_modules/.bin/eslint src/*.js"
      - Em seguida no terminal, rode o comando npm run lint
  
  Aula 010 - Configurando hooks no git

  Husky - alguns scripts que rodam antes de alguma tarefa
    * Projeto no github: https://github.com/typicode/husky
    * Lista de comandos: https://github.com/typicode/husky/blob/master/HOOKS.md

-- Fim do módulo 1




-- Início do módulo 2: Aprendendo ES6

  Aula 011 - Introdução ao EcmaScript 6
    * Features: http://es6-features.org/#Constants
    * Tabela de compatibilidade: https://kangax.github.io/compat-table/es6/
    * Leitura sobre es6
      - inglês: https://ponyfoo.com/articles/tagged/es6-in-depth
      - pt-br: https://nipher.io
  
  Aula 012-2.1 - Escopo do JS
    * nesta aula, foi abordado o escopo do js. Tiveram exemplo de declaração de variáveis
      usando a palavra chave 'var' em escopos diferentes, demonstrando o comportamento em situações específicas
    * o 'var' é global  a não ser que estejam dentro de funções
    * as variáveis feitas com 'var' são chamadas 'function scoped', são variáveis que tem o escopo somente dentro de funções ou são globais

  Aula 013-2.2 - Variável let no JS
    * nesta aula, foi abordado a palavra chave 'let'. Tiveram exemplos de declaração de variáveis 
      usando a palavra chave 'let' e 'var' em escopos diferentes, para demonstrar o comportamento de ambos em situações específicas.
    * uma das características do let é a declaração de variáveis em um escopo, e não correr o risco dessa variável ser reescrita em outro escopo.
      Então você garante que ela ficará presa apenas naquele escopo.

  Aula 014-2.3 - Variável const no JS
    * nesta aula, foi abordado a palavra chave 'const'. Tiveram exemplos de declaração de variáveis usando a palavra chave,
      com ênfase na afirmação que o const faz com que a variável fique imutável, mas não é bem assim.

    * a palavra chave const, faz com que a variável seja constante, não sendo possível reatribuir algum outro valor.
      Porém, em um dos exemplos na aula, se for criado um objeto usando 'const', é possível reatribuir os valores das propriedade 
      desse objeto. Mas reatribuir o objeto em si, não é possível.

  Aula 015-2.4 - Temporal Dead Zone  
    * nesta aula, foi abordado o tema temporal dead zone. Que nada mais é, uma referenciar uma variável, sem mesmo ter atribuído algum valor a ela antes.

    * se a palavra chave for 'var', a mensagem será 'undefined', pois o js faz algo chamado 'hosting', cuja a função é,
      pegar todas as variáveis declaradas que tem no corpo do js atribuir tudo em cima como se fosse global, já 
      que está sendo utilizado o 'var'.  

    * se for let ou const, o erro será diferente, pois quando se utiliza uma dessas palavras chaves, ele não fará o mesmo host
      como se faz no 'var', ele vai ignorar, não permitindo que seja criada um variável sem atribuição. Isso é útil pq assim a gente consegue ver que estamos chamando valores antes mesmo de serem atribuídos.
      
  Aula 016-3.1 - Introdução ao Arrow Function
    * arrow function é uma feature do es6. Uma expressão arrow function possui uma sintaxe mais curta do que uma função anônima do es5, por exemplo.

    * por ela ter uma sintaxe mais curta, ela tem como característica inicial, sua simplicidade na hora da leitura de código,
      o encadeamento de funções também fica bem mais simples

  Aula 017-3.2 - Arrow Function e o Lexical This

    * nesta aula foi abordado o elemento this do javascript.

    * o this do arrow function pega o contexto de onde ele está e não do contexto como um todo

    * é recomendado usar arrow function dentro de outras funções, para manipular as propriedades do objeto 
      no contexto que a função está
    
  Aula 018-4.1 - Introdução a Template Literals
    * template literal tem a função de criar strings com variaveis internas e concatena-las com mais praticidade
    
    * na aula foi mostrado como utilizar o template em uma string linear utilizando variáveis 
      e também utilizando a quebra de linha

  Aula 019-4.2 - Usando Template Literals Para HTML Fragments
    * criando fragmentos de HTML utilizando JS
    * na aula foi criado um fragmento de HTML utilizando o template literal,
      no caso, foi utilizado funções, variáveis e as próprias tags em HTML.
  
  Aula 020-4.3 - Tagged Template
    * utilizando uma função na frente do texto e fazer modificações em cima dele
    * nessa aula houve a:
      * utilização da expressão "debugger"
      * utilização da feature de parâmetros do es6 chamada rest: https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Functions/rest_parameters
      * utilização da função reduce() do js
  
  Aula 021-5.1 - Shorthand Properties
    * na aula foi mostrado a utilização do shorthand Properties presente no es6
    * tiveram dois exemplos: uma alternativa de atribuir um valor a uma propriedade de um objeto
      e atribuir um função a um objeto  
  
  Aula 022-5.2 - Default Parameters 
    * uma adição dentro do es6, para setar um parâmetro padrão dentro de uma função
    * bastante útil para evitar o famoso 'undefined'

  Aula 023-5.3 - Novos Métodos Para Strings
    * Métodos para se trabalhar com strings es6
      - startsWith() -> verifica o ínicio da string retornando um booleano
      - endsWith()   -> verifica o final da string retornando um booleano
      - includes()   -> verifica se existe uma string a partir de uma string
      - repeat()     -> repete uma string n vezes
  
  Aula 024-6.1 - Array.from()
    * faz com que o elemento tenha características de um Array
      tendo acesso a todos os métodos que um array contém

    * foi mostrado também como transformar uma string em um array

  Aula 025-6.2 - Array.of()
    * Criar um array a partir de certos elementos
    * Bastante útil para quando precisamos juntar vários elementos diferentes e inseri-los em um array

  Aula 026-6.3 - Array.find() e Array.findIndex()
    * Array.find() - procura um dado dentro de um array e quando acha, ele retorna aquele elemento e termina a função
    * Array.findIndex() - procura um índice de um array e retorna o índice
    * Bastante poderosos para buscar um determinado elemento dentro de um array passado por uma api, por exemplo.

  Aula 027-6.4 - Array.fill()
    * Array.fill() - insere um dado dentro de um array, sendo possível passar dois parâmetros para delimitar
      a posição em que o dado será colocado,sendo o primeiro, o índice inicial onde o elemento será inserido e, o segundo,]
      o índice final menos 1 até onde o elemento será inserido
     
  Aula 028-7.1 - Introdução ao Destructuring

    * Destructuring é uma feature para pegar valores de arrays ou objetos
      com mais praticidades e com algumas linhas de código

-- Fim do módulo 2
